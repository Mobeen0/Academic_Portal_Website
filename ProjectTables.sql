
CREATE DATABASE FLEX;
USE FLEX;


-- ****************************************TABLE CREATION**************************************** --
CREATE TABLE CAMPUSES(
	C_ID INT PRIMARY KEY,
	C_NAME VARCHAR(20) NOT NULL
);

CREATE TABLE USERS(
	REG_NO NUMERIC(4) NOT NULL,
	UTYPE CHAR NOT NULL CHECK(UTYPE='S' OR UTYPE ='A' OR UTYPE='F'),
	PRIMARY KEY(REG_NO,UTYPE),
	FNAME VARCHAR(20) NOT NULL,
	LNAME VARCHAR(20) NOT NULL,
	CNIC CHAR(15) CHECK(CNIC LIKE '[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9]') NOT NULL UNIQUE,
	DOB DATE NOT NULL,
	C_ID INT FOREIGN KEY REFERENCES CAMPUSES(C_ID) NOT NULL,
	C_ADDRESS VARCHAR(50) NOT NULL,
	C_CITY VARCHAR(20) NOT NULL,
	C_COUNTRY VARCHAR(20) NOT NULL,
	C_PHONE VARCHAR(13),
	C_POSTAL INT,
	P_ADDRESS VARCHAR(50) NOT NULL,
	P_CITY VARCHAR(20) NOT NULL,
	P_COUNTRY VARCHAR(20) NOT NULL,
	P_PHONE VARCHAR(13),
	P_POSTAL INT,
	UNAME VARCHAR(20) UNIQUE,
	PASS VARCHAR(20) CHECK(PASS LIKE '________%') NOT NULL -- length greater than 8
);

CREATE TABLE STUDENT(
	UTYPE CHAR NOT NULL,
	REG_NO NUMERIC(4) NOT NULL PRIMARY KEY,
	FOREIGN KEY(REG_NO,UTYPE) REFERENCES USERS(REG_NO,UTYPE),
	ENROLLMENT_YEAR INT CHECK(ENROLLMENT_YEAR>0 AND ENROLLMENT_YEAR< YEAR(CURRENT_TIMESTAMP)) NOT NULL,
	STATUS CHAR NOT NULL CHECK(STATUS ='S' OR STATUS='C' OR STATUS='G'),
	DEGREE CHAR(2) NOT NULL,
);

CREATE TABLE ACADEMIC(
	UTYPE CHAR NOT NULL,
	REG_NO NUMERIC(4) NOT NULL PRIMARY KEY,
	FOREIGN KEY(REG_NO,UTYPE) REFERENCES USERS(REG_NO,UTYPE),
);

CREATE TABLE FACULTY(
	UTYPE CHAR NOT NULL,
	REG_NO NUMERIC(4) NOT NULL PRIMARY KEY,
	FOREIGN KEY(REG_NO,UTYPE) REFERENCES USERS(REG_NO,UTYPE),
	TITLE VARCHAR(20) NOT NULL CHECK(TITLE='PROFESSOR' OR TITLE='LECTURER' OR TITLE = 'INSTRUCTOR'),
);

CREATE TABLE RELATIONS(
	RELATION VARCHAR(20) CHECK (RELATION LIKE'Guardian' OR RELATION LIKE '%Father%' OR RELATION LIKE '%Mother%' OR RELATION LIKE 'Uncle'), -- grandmother/grandfather also allowed
	FNAMER VARCHAR(20) NOT NULL,
	LNAMER VARCHAR(20) NOT NULL,
	WITHHOLD_TAX BIT NOT NULL,
	CNICR CHAR(15) CHECK(CNICR LIKE '[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9]') NOT NULL UNIQUE,
	REG_NO NUMERIC(4) NOT NULL PRIMARY KEY,
	FOREIGN KEY(REG_NO) REFERENCES STUDENT
);

CREATE TABLE COURSES(
	C_NUM INT NOT NULL,
	C_GROUP VARCHAR(20) NOT NULL CHECK(C_GROUP='MT'OR C_GROUP='CS' OR C_GROUP = 'MG' OR C_GROUP = 'EE' OR C_GROUP = 'CL' OR C_GROUP = 'EL'),
	CREDIT_HOURS INT CHECK(CREDIT_HOURS>0 AND CREDIT_HOURS<5),
	COORDINATOR NUMERIC(4),
	C_NAME VARCHAR(30),
	FOREIGN KEY (COORDINATOR) REFERENCES FACULTY(REG_NO),
	PRIMARY KEY(C_NUM,C_GROUP)
);

CREATE TABLE PREREQ(
	PREREQ_NUM INT NOT NULL,
	PREREQ_GROUP VARCHAR(20) NOT NULL,
	NUM INT NOT NULL,
	PGROUP VARCHAR(20) NOT NULL,
	FOREIGN KEY(NUM,PGROUP) REFERENCES COURSES(C_NUM,C_GROUP),
	FOREIGN KEY(PREREQ_NUM,PREREQ_GROUP) REFERENCES COURSES(C_NUM,C_GROUP)
);

CREATE TABLE SEMESTERS(
	S_ID INT PRIMARY KEY,
	S_BEGIN NUMERIC(2),
	S_END NUMERIC(2),
	S_SEASON CHAR CHECK(S_SEASON like '[S,F,A]'),
	UNIQUE(S_BEGIN,S_END,S_SEASON)
);

CREATE TABLE COURSE_SECTIONS(
	SEC_ID INT PRIMARY KEY,
	SECTION CHAR,
	C_NUM INT NOT NULL,
	C_GROUP VARCHAR(20) NOT NULL,
	REG_NO NUMERIC(4) NOT NULL,
	S_ID INT NOT NULL,
	FOREIGN KEY (C_NUM,C_GROUP) REFERENCES COURSES(C_NUM,C_GROUP),
	FOREIGN KEY (REG_NO) REFERENCES FACULTY(REG_NO),
	FOREIGN KEY (S_ID) REFERENCES SEMESTERS,
	
);


CREATE TABLE COURSES_TAKEN(
	REG_NO NUMERIC(4) NOT NULL FOREIGN KEY REFERENCES STUDENT,
	C_NUM INT,
	C_GROUP VARCHAR(20),
	GRADE VARCHAR(2),
	S_ID INT,
	PRIMARY KEY(REG_NO,C_GROUP,C_NUM),
	FOREIGN KEY(C_NUM,C_GROUP) REFERENCES COURSES(C_NUM,C_GROUP),
	FOREIGN KEY (S_ID) REFERENCES SEMESTERS(S_ID)
);

CREATE TABLE ATTENDANCE(
	AttendID INT,
	PRIMARY KEY(AttendID),
	DDATE DATE,
	SEC_ID INT NOT NULL,
	CHours NUMERIC(2,1),
	SSTATUS CHAR NOT NULL CHECK(SSTATUS ='A' OR SSTATUS = 'L' OR SSTATUS = 'P'),
	REG_NO NUMERIC(4),
	FOREIGN KEY (REG_NO) REFERENCES STUDENT(REG_NO),
	FOREIGN KEY(SEC_ID) REFERENCES COURSE_SECTIONS
);

CREATE TABLE EVALUATION( -- Total Grade is 25
	EVALID INT NOT NULL,
	PRIMARY KEY (EVALID),
	CRITERIA1 INT NOT NULL CHECK(CRITERIA1>0 AND CRITERIA1<6),
	CRITERIA2 INT NOT NULL CHECK(CRITERIA2>0 AND CRITERIA2<6),
	CRITERIA3 INT NOT NULL CHECK(CRITERIA3>0 AND CRITERIA3<6),
	CRITERIA4 INT NOT NULL CHECK(CRITERIA4>0 AND CRITERIA4<6),
	CRITERIA5 INT NOT NULL CHECK(CRITERIA5>0 AND CRITERIA5<6),
	COMMENTS VARCHAR(100),
	SEC_ID INT NOT NULL,
	FOREIGN KEY (SEC_ID) REFERENCES COURSE_SECTIONS,
	STUDREG_NO NUMERIC(4),
	FOREIGN KEY(STUDREG_NO) REFERENCES STUDENT(REG_NO)
);

CREATE TABLE MARKS_FIELD(
	F_ID INT PRIMARY KEY,
	SEC_ID INT NOT NULL FOREIGN KEY REFERENCES COURSE_SECTIONS,
	FIELD_NAME VARCHAR(20),
	WEIGHTAGE INT NOT NULL,
);

CREATE TABLE MARKS_RECIEVED(
	F_ID INT NOT NULL FOREIGN KEY REFERENCES MARKS_FIELD(F_ID),
	REG_NO NUMERIC(4) NOT NULL,
	FOREIGN KEY(REG_NO) REFERENCES STUDENT,
	RECIEVED INT,
	--CHECK IF STUDENT IS ACTUALLY REGISTERED TO COURSE AND MARKS ARE LESS THAN WEIGHTAGE
);

CREATE TABLE Course_REGISTERING(
	REG_NO NUMERIC(4),
	UTYPE CHAR,
	C_NUM INT,
	C_GROUP VARCHAR(20),
	FOREIGN KEY (C_NUM,C_GROUP) REFERENCES COURSES(C_NUM,C_GROUP),
	FOREIGN KEY(REG_NO,UTYPE) REFERENCES USERS(REG_NO,UTYPE),
	PRIMARY KEY(REG_NO,C_GROUP,C_NUM)
);

CREATE TABLE StudentSec(
REG_NO NUMERIC(4),
SECTION CHAR,
C_NUM INT,
C_GROUP VARCHAR(20),
PRIMARY KEY(REG_NO,SECTION,C_NUM,C_GROUP)
);

CREATE TABLE AUDIT_LOG(
	L_UNAME VARCHAR(20),
	L_ID INT IDENTITY(0,1) PRIMARY KEY,
	L_ACTION CHAR(6) NOT NULL CHECK(L_ACTION='INSERT' OR L_ACTION='UPDATE' OR L_ACTION='DELETE'),
	L_DATE DATETIME NOT NULL,
	L_TABLE VARCHAR(20) NOT NULL,
);

-- *********************************************************************************************** --


DROP TABLE StudentSec;
DROP TABLE AUDIT_LOG;
DROP TABLE COURSE_REGISTERING;
DROP TABLE MARKS_RECIEVED;
DROP TABLE MARKS_FIELD;
DROP TABLE EVALUATION;
DROP TABLE ATTENDANCE;
DROP TABLE COURSES_TAKEN;
DROP TABLE COURSE_SECTIONS;
DROP TABLE SEMESTERS;
DROP TABLE PREREQ;
DROP TABLE COURSES;
DROP TABLE RELATIONS;
DROP TABLE FACULTY;
DROP TABLE ACADEMIC;
DROP TABLE STUDENT;
DROP TABLE USERS;
DROP TABLE CAMPUSES;

SELECT * FROM USERS;


INSERT INTO CAMPUSES(C_ID,C_NAME) VALUES(0,'Islamabad');
INSERT INTO CAMPUSES(C_ID,C_NAME) VALUES(1,'Lahore');
SELECT * FROM CAMPUSES;


INSERT INTO USERS(REG_NO,UTYPE,FNAME,LNAME,CNIC,DOB,C_ID,C_ADDRESS,C_CITY,C_COUNTRY,C_PHONE,C_POSTAL,P_ADDRESS,P_CITY,P_COUNTRY,P_PHONE,P_POSTAL,UNAME,PASS)
						VALUES(1000,'S','Muhammad','Mobeen','61101-3629851-7',CONVERT(DATE,'2002-APR-4'),0,
						'g-13 STREET House','Islamabad','Pakistan',03118507587,44000,'g-13 STREET House',
						'Islamabad','Pakistan',03118507587,44000,'21i-0444','123456789');
INSERT INTO USERS(REG_NO,UTYPE,FNAME,LNAME,CNIC,DOB,C_ID,C_ADDRESS,C_CITY,C_COUNTRY,C_PHONE,C_POSTAL,P_ADDRESS,P_CITY,P_COUNTRY,P_PHONE,P_POSTAL,UNAME,PASS)
						VALUES(1001,'A','Muhammad','Mobeen','61101-3629151-7',CONVERT(DATE,'2002-APR-4'),0,
						'g-13 STREET House','Islamabad','Pakistan',03118507587,44000,'g-13 STREET House',
						'Islamabad','Pakistan',03118507587,44000,'Admin','123456789');
INSERT INTO USERS(REG_NO,UTYPE,FNAME,LNAME,CNIC,DOB,C_ID,C_ADDRESS,C_CITY,C_COUNTRY,C_PHONE,C_POSTAL,P_ADDRESS,P_CITY,P_COUNTRY,P_PHONE,P_POSTAL,UNAME,PASS)
						VALUES(1002,'F','Muhammad','Mobeen','61121-3629151-7',CONVERT(DATE,'2002-APR-4'),0,
						'g-13 STREET House','Islamabad','Pakistan',03118507587,44000,'g-13 STREET House',
						'Islamabad','Pakistan',03118507587,44000,'teacher','123456789');
INSERT INTO USERS(REG_NO,UTYPE,FNAME,LNAME,CNIC,DOB,C_ID,C_ADDRESS,C_CITY,C_COUNTRY,C_PHONE,C_POSTAL,P_ADDRESS,P_CITY,P_COUNTRY,P_PHONE,P_POSTAL,UNAME,PASS)
						VALUES(1003,'S','Talal','Babar','61101-3629251-7',CONVERT(DATE,'2002-APR-4'),0,
						'g-13 STREET House','Islamabad','Pakistan',03118507587,44000,'g-13 STREET House',
						'Islamabad','Pakistan',03118507587,44000,'21i-0432','123456789');

SELECT * FROM USERS;

INSERT INTO STUDENT(UTYPE,REG_NO,ENROLLMENT_YEAR,STATUS,DEGREE) VALUES ('S',1000,21,'S','CS');
INSERT INTO STUDENT(UTYPE,REG_NO,ENROLLMENT_YEAR,STATUS,DEGREE) VALUES ('S',1003,22,'S','CS');
SELECT * FROM STUDENT;

INSERT INTO RELATIONS(RELATION,FNAMER,LNAMER,WITHHOLD_TAX,CNICR,REG_NO) VALUES ('Father','Ali','Raza',1,'61101-3629851-3',1000);
SELECT * FROM RELATIONS;

INSERT INTO FACULTY(UTYPE,REG_NO,TITLE) VALUES('F',1002,'Instructor');
SELECT * FROM FACULTY;

INSERT INTO COURSES(C_NUM,C_GROUP,CREDIT_HOURS,C_NAME,COORDINATOR) VALUES(2000,'CS',3,'Data Structure',1002);
INSERT INTO COURSES(C_NUM,C_GROUP,CREDIT_HOURS,C_NAME,COORDINATOR) VALUES(2001,'MT',3,'Differential Equations',1002);
INSERT INTO COURSES(C_NUM,C_GROUP,CREDIT_HOURS,C_NAME,COORDINATOR) VALUES(2002,'EE',3,'Digital Logic Design',1002);
SELECT * FROM COURSES;

INSERT INTO SEMESTERS(S_ID,S_BEGIN,S_END,S_SEASON) VALUES(0,05,09,'F');
SELECT * FROM SEMESTERS;

INSERT INTO COURSES_TAKEN(REG_NO,C_NUM,C_GROUP,GRADE,S_ID) VALUES(1000,2001,'MT','A+',0);
SELECT * FROM COURSES_TAKEN;

INSERT INTO PREREQ(PREREQ_NUM,PREREQ_GROUP,NUM,PGROUP) VALUES(2001,'MT',2000,'CS');
INSERT INTO PREREQ(PREREQ_NUM,PREREQ_GROUP,NUM,PGROUP) VALUES(2001,'MT',2002,'EE');
SELECT * FROM PREREQ;



INSERT INTO COURSE_SECTIONS(SECTION,C_NUM,C_GROUP,REG_NO,S_ID) VALUES('C',2000,'CS',1002,0);
INSERT INTO COURSE_SECTIONS(SECTION,C_NUM,C_GROUP,REG_NO,S_ID) VALUES('B',2000,'CS',1002,0);
SELECT * FROM COURSE_SECTIONS;

INSERT INTO ATTENDANCE(AttendID,DDATE,SEC_ID,CHOURS,SSTATUS,REG_NO) VALUES (1,GETDATE(),0,1,'P',1000);
INSERT INTO ATTENDANCE(AttendID,DDATE,SEC_ID,CHours,SSTATUS,REG_NO) VALUES (2,GETDATE(),0,3,'A',1000);
INSERT INTO ATTENDANCE(AttendID,DDATE,SEC_ID,CHours,SSTATUS,REG_NO) VALUES (3,GETDATE(),0,1.5,'P',1000);
INSERT INTO ATTENDANCE(AttendID,DDATE,SEC_ID,CHours,SSTATUS,REG_NO) VALUES (7,GETDATE(),0,3,'P',1003);

SELECT * FROM ATTENDANCE;

INSERT INTO StudentSec(REG_NO,SECTION,C_NUM,C_GROUP) VALUES (1000,'C',2000,'CS');

SELECT * FROM StudentSec;

SELECT * FROM COURSE_SECTIONS;

GO
CREATE PROCEDURE Attend_Rep @UserName VARCHAR(20),@uPASS VARCHAR(20)
AS
BEGIN
SELECT u.FNAME,u.LNAME,CONCAT(cs.C_GROUP,'-',cs.C_NUM) AS Course,a.DDATE,a.SSTATUS,a.CHours,c.C_NAME
FROM USERS u
INNER JOIN ATTENDANCE a
ON u.REG_NO = a.REG_NO
INNER JOIN COURSE_SECTIONS cs 
ON a.SEC_ID = cs.SEC_ID
INNER JOIN COURSES c
ON c.C_NUM = cs.C_NUM AND c.C_GROUP = cs.C_GROUP
WHERE u.UNAME =@UserName AND u.PASS = @uPASS;
END
GO

GO
CREATE PROCEDURE Offered_Courses @UserName VARCHAR(20),@uPASS VARCHAR(20)
AS
BEGIN
SELECT CONCAT(c.C_GROUP,'-',c.C_NUM) AS Crs,c.C_NAME ,c.CREDIT_HOURS,c.C_NAME
FROM USERS u
INNER JOIN COURSES_TAKEN ct
ON u.REG_NO = ct.REG_NO
INNER JOIN PREREQ pr
ON ct.C_NUM = pr.PREREQ_NUM AND ct.C_GROUP = pr.PREREQ_GROUP
RIGHT OUTER JOIN COURSES c
ON c.C_NUM = pr.NUM AND c.C_GROUP = pr.PGROUP
WHERE ct.GRADE NOT LIKE'F' OR ct.GRADE IS NULL;

END
GO

GO
CREATE PROCEDURE StTranscript @UserName VARCHAR(20),@uPASS VARCHAR(20)
AS
BEGIN
SELECT (ct.S_ID + 1) AS Sem,CONCAT(ct.C_GROUP,'-',ct.C_NUM) AS Course,ct.GRADE,c.C_NAME,c.CREDIT_HOURS
FROM USERS u
INNER JOIN COURSES_TAKEN ct
ON u.REG_NO = ct.REG_NO
INNER JOIN SEMESTERS s
ON ct.S_ID = s.S_ID
INNER JOIN COURSES c
ON c.C_NUM = ct.C_NUM AND c.C_GROUP = ct.C_GROUP
WHERE u.UNAME =@UserName AND u.PASS = @uPASS;

END
GO

GO
CREATE FUNCTION getRegister(@UserName VARCHAR(20),@uPass VARCHAR(20))
RETURNS NUMERIC(4)
AS
BEGIN
RETURN(
SELECT REG_NO
FROM USERS u
WHERE u.UNAME = @UserName AND u.PASS = @uPASS
)
END
GO

GO
CREATE PROCEDURE CRSRegister @UserName VARCHAR(20),@uPASS VARCHAR(20),@CrsNum INT,@CRSGroup VARCHAR(20)
AS
BEGIN
INSERT INTO Course_REGISTERING(REG_NO,UTYPE,C_NUM,C_GROUP)
VALUES (dbo.getRegister(@UserName,@uPass),'S',@CrsNum,@CRSGroup);

END
GO

GO
CREATE PROCEDURE AllCourse @UserName VARCHAR(20),@uPass VARCHAR(20)
AS
BEGIN
SELECT DISTINCT u.REG_NO, u.FNAME,u.LNAME,CONCAT(c.C_GROUP,'-',C.C_NUM) AS Crse,c.CREDIT_HOURS,c.C_NAME
FROM USERS u,COURSES c
WHERE u.UNAME=@UserName AND u.PASS=@uPASS;

END
GO

SELECT* FROM COURSES;



GO
CREATE PROCEDURE StudentSections
AS
BEGIN
SELECT CONCAT(c.C_GROUP,'-',c.C_NUM) AS Crse,c.C_NAME ,CONCAT(st.ENROLLMENT_YEAR,'-',u.REG_NO)AS RollNum, s.SECTION
FROM StudentSec s
INNER JOIN COURSES c
ON s.C_NUM = c.C_NUM AND s.C_GROUP = c.C_GROUP
INNER JOIN USERS u
ON u.REG_NO = s.REG_NO
INNER JOIN STUDENT st
ON u.REG_NO = st.REG_NO
END
GO



GO
CREATE PROCEDURE ShowInstructorsTeaching
AS
BEGIN

SELECT CONCAT(cs.C_GROUP,'-',cs.C_NUM) AS Crse, c.C_NAME,CONCAT(u.FNAME,' ',u.LNAME) AS FULL_NAMEIns,CONCAT(u2.FNAME,' ',u2.LNAME) AS FULL_NAMECord,c.CREDIT_HOURS,cs.SECTION
FROM COURSE_SECTIONS cs
INNER JOIN COURSES c
ON cs.C_NUM = c.C_NUM AND c.C_GROUP = cs.C_GROUP
INNER JOIN USERS u
ON u.REG_NO=cs.REG_NO
LEFT OUTER JOIN USERS u2
ON c.COORDINATOR = u2.REG_NO;

END
GO
GO


GO
CREATE PROCEDURE ATTENDPercentage
AS
BEGIN
SELECT REG_NO,COUNT(*) * 100/(SELECT COUNT(*) FROM ATTENDANCE WHERE REG_NO =a.REG_NO) AS StdPercentage
FROM ATTENDANCE a
WHERE SSTATUS='P'
GROUP BY REG_NO;
END
GO


GO
CREATE PROCEDURE TeacherSections @UserName VARCHAR(20), @PASSword VARCHAR(20)
AS
BEGIN
SELECT CONCAT(cs.C_GROUP,'-',cs.C_NUM) AS crse, CONCAT(s2.ENROLLMENT_YEAR,'-',s2.REG_NO)AS ROLLNUM,ss.SECTION
FROM STUDENTSEC ss
INNER JOIN COURSE_SECTIONS cs
ON cs.SECTION = ss.SECTION
INNER JOIN USERS u
ON u.REG_NO = cs.REG_NO
INNER JOIN STUDENT s2
ON ss.REG_NO = s2.REG_NO
WHERE u.UNAME=@UserName AND u.PASS = @PASSword
END
GO



-- ****************************************** TRIGGERS ************************************ --

GO
CREATE TRIGGER LOG_CAMPUSES_INSERT
ON CAMPUSES
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','CAMPUSES')
END

GO
CREATE TRIGGER LOG_CAMPUSES_UPDATE
ON CAMPUSES
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','CAMPUSES')
END

GO
CREATE TRIGGER LOG_CAMPUSES_DELETE
ON CAMPUSES
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','CAMPUSES')
END


GO
CREATE TRIGGER LOG_USERS_INSERT
ON USERS
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','USERS')
END

GO
CREATE TRIGGER LOG_USERS_UPDATE
ON USERS
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','USERS')
END

GO
CREATE TRIGGER LOG_USERS_DELETE
ON USERS
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','USERS')
END


GO
CREATE TRIGGER LOG_STUDENT_INSERT
ON STUDENT
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','STUDENT')
END

GO
CREATE TRIGGER LOG_STUDENT_UPDATE
ON STUDENT
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','STUDENT')
END

GO
CREATE TRIGGER LOG_STUDENT_DELETE
ON STUDENT
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','STUDENT')
END

GO
CREATE TRIGGER LOG_ACADEMIC_INSERT
ON ACADEMIC
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','ACADEMIC')
END

GO
CREATE TRIGGER LOG_ACADEMIC_UPDATE
ON ACADEMIC
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','ACADEMIC')
END

GO
CREATE TRIGGER LOG_ACADEMIC_DELETE
ON ACADEMIC
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','ACADEMIC')
END

GO
CREATE TRIGGER LOG_FACULTY_INSERT
ON FACULTY
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','FACULTY')
END

GO
CREATE TRIGGER LOG_FACULTY_UPDATE
ON FACULTY
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','FACULTY')
END

GO
CREATE TRIGGER LOG_FACULTY_DELETE
ON FACULTY
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','FACULTY')
END

GO
CREATE TRIGGER LOG_RELATIONS_INSERT
ON RELATIONS
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','RELATIONS')
END

GO
CREATE TRIGGER LOG_RELATIONS_UPDATE
ON RELATIONS
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','RELATIONS')
END

GO
CREATE TRIGGER LOG_RELATIONS_DELETE
ON RELATIONS
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','RELATIONS')
END

GO
CREATE TRIGGER LOG_COURSES_INSERT
ON COURSES
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','COURSES')
END

GO
CREATE TRIGGER LOG_COURSES_UPDATE
ON COURSES
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','COURSES')
END

GO
CREATE TRIGGER LOG_COURSES_DELETE
ON COURSES
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','COURSES')
END

GO
CREATE TRIGGER LOG_PREREQ_INSERT
ON PREREQ
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','PREREQ')
END

GO
CREATE TRIGGER LOG_PREREQ_UPDATE
ON PREREQ
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','PREREQ')
END

GO
CREATE TRIGGER LOG_PREREQ_DELETE
ON PREREQ
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','PREREQ')
END

GO
CREATE TRIGGER LOG_SEMESTERS_INSERT
ON SEMESTERS
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','SEMESTERS')
END

GO
CREATE TRIGGER LOG_SEMESTERS_UPDATE
ON SEMESTERS
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','SEMESTERS')
END

GO
CREATE TRIGGER LOG_SEMESTERS_DELETE
ON SEMESTERS
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','SEMESTERS')
END

GO
CREATE TRIGGER LOG_COURSE_SECTIONS_INSERT
ON COURSE_SECTIONS
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','COURSE_SECTIONS')
END

GO
CREATE TRIGGER LOG_COURSE_SECTIONS_UPDATE
ON COURSE_SECTIONS
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','COURSE_SECTIONS')
END

GO
CREATE TRIGGER LOG_COURSE_SECTIONS_DELETE
ON COURSE_SECTIONS
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','COURSE_SECTIONS')
END

GO
CREATE TRIGGER LOG_COURSES_TAKEN_INSERT
ON COURSES_TAKEN
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','COURSES_TAKEN')
END

GO
CREATE TRIGGER LOG_COURSES_TAKEN_UPDATE
ON COURSES_TAKEN
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','COURSES_TAKEN')
END

GO
CREATE TRIGGER LOG_COURSES_TAKEN_DELETE
ON COURSES_TAKEN
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','COURSES_TAKEN')
END

GO
CREATE TRIGGER LOG_ATTENDANCE_INSERT
ON ATTENDANCE
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','ATTENDANCE')
END

GO
CREATE TRIGGER LOG_ATTENDANCE_UPDATE
ON ATTENDANCE
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','ATTENDANCE')
END

GO
CREATE TRIGGER LOG_ATTENDANCE_DELETE
ON ATTENDANCE
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','ATTENDANCE')
END

GO
CREATE TRIGGER LOG_EVALUATION_INSERT
ON EVALUATION
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','EVALUATION')
END

GO
CREATE TRIGGER LOG_EVALUATION_UPDATE
ON EVALUATION
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','EVALUATION')
END

GO
CREATE TRIGGER LOG_EVALUATION_DELETE
ON EVALUATION
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','EVALUATION')
END

GO
CREATE TRIGGER LOG_MARKS_FIELD_INSERT
ON MARKS_FIELD
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','MARKS_FIELD')
END

GO
CREATE TRIGGER LOG_MARKS_FIELD_UPDATE
ON MARKS_FIELD
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','MARKS_FIELD')
END

GO
CREATE TRIGGER LOG_MARKS_FIELD_DELETE
ON MARKS_FIELD
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','MARKS_FIELD')
END

GO
CREATE TRIGGER LOG_MARKS_RECIEVED_INSERT
ON MARKS_RECIEVED
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','MARKS_RECIEVED')
END

GO
CREATE TRIGGER LOG_MARKS_RECIEVED_UPDATE
ON MARKS_RECIEVED
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','MARKS_RECIEVED')
END

GO
CREATE TRIGGER LOG_MARKS_RECIEVED_DELETE
ON MARKS_RECIEVED
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','MARKS_RECIEVED')
END

GO
CREATE TRIGGER LOG_COURSE_REGISTERING_INSERT
ON COURSE_REGISTERING
AFTER INSERT 
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'INSERT','COURSE_REGISTERING')
END

GO
CREATE TRIGGER LOG_COURSE_REGISTERING_UPDATE
ON COURSE_REGISTERING
AFTER UPDATE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'UPDATE','COURSE_REGISTERING')
END

GO
CREATE TRIGGER LOG_COURSE_REGISTERING_DELETE
ON COURSE_REGISTERING
AFTER DELETE
AS
BEGIN 
DECLARE @USER varchar(20)
SELECT @USER = CAST(SESSION_CONTEXT(N'loggedUser') AS varchar(20))
DECLARE @CURRTIME DATETIME = GETDATE()

INSERT INTO AUDIT_LOG(L_UNAME,L_DATE,L_ACTION,L_TABLE) VALUES
(@USER,@CURRTIME,'DELETE','COURSE_REGISTERING')
END

-- *************************************************************************************** --



